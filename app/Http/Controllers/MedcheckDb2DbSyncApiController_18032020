<?php

namespace App\Http\Controllers;

//use GuzzleHttp\Client;
use App\Helpers\Helper;
use Illuminate\Http\Request;
use App\Model\AdminSettings;
use App\Model\Doctor\DoctorProfile;
use App\Model\Notification;
use App\Model\PasswordResetCodes;
use App\Model\Patient\PatientCreditLogs;
use App\Model\Patient\PatientCredits;
use App\Model\UserRole;
use App\Model\User\CancelRescheduleCount;
use App\Model\User\UserReferralCode;
use App\Model\VerificationCodes;
use App\User;
use Auth;
use Carbon\Carbon;
use Config;
use DB;
use Exception;
use Hash;
use JWTAuth;
use Mail;
use Socialite;
use App\Model\Medcheck\medcheckuser;
use App\Model\Medcheck\medcheckuserstable;
use App\Model\Medcheck\medcheckecgdata;
use App\Model\Medcheck\medcheckweightscale;
use App\Model\Medcheck\medcheckspo2;
use App\Model\Medcheck\medchecktemparature;
use App\Model\Medcheck\medcheckglucosedata;
use Tymon\JWTAuth\Exceptions\JWTException;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;
use URL;
use Validator;

class MedcheckDb2DbSyncApiController extends Controller
{
    private $settings;

  /**
   * Instantiate a new MedcheckDb2DbSyncApiController instance.
   *
   * @return void
   */
  public function __construct(){
    $settings = AdminSettings::all();
    $arr = array();
    foreach ($settings as $value) {
      $arr[$value->key] = $value->value;
    }
    $this->settings = $arr;
    }
    
    //MEDCHECK DATA Db2DbSync
  public function registermedcheckuser(Request $request){
        //echo 'registermedcheckuser-start-'.str_replace('+', '', $request['country_code']).$request['mobile_number'];
        $validator = Validator::make($request->all(), [
      'name' => 'nullable|max:255',
      'email' => 'nullable|email|max:255',
      'mobile_no' => 'required',
      'country_code' => 'required|numeric',
      'organisation_id' => 'nullable|exists:users,id',
      'password' => 'required'
    ]);

    if($validator->fails()){
      $errors = collect($validator->messages())->flatten()->toArray();
      return response()->json(['success' => false, 'message' => 'Validation Failed', 'validation' => $errors]);
    }

    // Check Whether Patient Mobile or Email Exists or Not.
    //$email_exists = User::whereEmail($request->email)
    //          ->whereUserRole(4)
    //          ->exists();

    $mobile_exists = User::whereMobileNo($request->country_code.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();

    //if($email_exists){
    //  return response()->json(['success' => false, 'message' => 'Email already Exists']);
    //}

    if($mobile_exists){
      return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
    }

    try{

      DB::beginTransaction();
      // Create Patient 
      $patient = new User();
      $patient->user_role = 4;
      $patient->name = $request->name;
      $patient->email = $request->email;
      $patient->mobile_no = $request->country_code.$request->mobile_no;
      $patient->organisation_id = $request->organisation_id;
      $patient->password = bcrypt($request->password);
      $patient->save();

      $patient->shdct_user_id = Config::get('sheDoctr.db.patientPrefix').$patient->id;
      $patient->save();

      //Send Sms for User Mobile Verification
      $verification_code = mt_rand(1000, 9999);
      $msgtxt = '<#> C2P: Your Cover2Protect verification code is '.$verification_code.' SRwtvi7PLLR';
      $msgData = array(
        'recipient_no' => $patient->mobile_no,
        'msgtxt' => $msgtxt
      );
      $sendsms = Helper::sendSMS($msgData);
      $sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
      DB::commit();

      return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
    }
    catch(\Exception $e){
       
      DB::rollBack();
      return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
    }
    }
    





       public function SyncMedCheckUsers()
       {

        $curl = curl_init();
 
  curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\n\t\"data\":{\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\",\n\t\t\"per_page\":\"100\",\n\t\t\"page_no\":\"1\"\n\t}\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: text/plain"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
//echo $response;
//$response_data  = json_encode(unserialize(serialize($response)));
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
            { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
    //$email_exists = User::whereEmail($request->email)
    //          ->whereUserRole(4)
    //          ->exists();
//str_replace('+', '', $v['country_code']); 
    $mobile_exists = User::whereMobileNo(str_replace('+', '', $v['country_code']).$v['mobile_number'])
        ->whereUserRole(4)
        ->exists();

//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))

if(!$mobile_exists){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try{

    DB::beginTransaction();
    // Create Patient 
    $patient = new User();
    $patient->user_role = 4;
    $patient->name = ' ';
    $patient->email = $v['email'];
    $patient->mobile_no = str_replace('+', '', $v['country_code']).$v['mobile_number'];
    $patient->organisation_id = '4';
    $patient->password = bcrypt('welcome@c2p');
    $patient->save();

    $patient->shdct_user_id = Config::get('sheDoctr.db.patientPrefix').$patient->id;
    $patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    $msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
    $msgData = array(
        'recipient_no' => $patient->mobile_no,
        'msgtxt' => $msgtxt
    );
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else{echo 'Mobile Number already Exists -'.$v['mobile_number'].'-'.$v['email'].',';}
} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Successfully']);
    
}







public function SyncMedCheckBp($id)
{
  // $mobile_no1 = $id;
$num =medcheckuserstable::where('mobile_no', ['mobile_no' => $id])->value('id');
 
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-blood-pressure-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\n\t\"data\":{\n\t\t\"mobile_number\":\"".$id."\",\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\n\t}\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: application/json"
  ),
));
//return "{\n\t\"data\":{\n\t\t\"mobile_number\":\"".$id."\",\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\n\t}\n}";
$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
    //$email_exists = User::whereEmail($request->email)
    //          ->whereUserRole(4)
    //          ->exists();
//str_replace('+', '', $v['country_code']); 
    //$bp = medcheckuser::whereBp(str_replace('/', '', $v['systolic']).$v['diastolic'])
      //  ->whereuser_id(4)
        //->exists();

             $device_reading_time= medcheckuser::wheredevice_reading_time($v['device_reading_time'])
              ->whereuser_id(1)
              ->exists();

//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$device_reading_time){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medcheckuser();
    $patient->user_id = 4;
    $patient->bp =str_replace('/', '', $v['systolic']).$v['diastolic'];
    $patient->date =$v['device_reading_time'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time -'.$v['systolic'].'-'.$v['diastolic'].',';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync bp Successfully']);
}










public function SyncMedCheckHr($id)
{
  $num =medcheckuserstable::where('mobile_no', ['mobile_no' => $id])->value('id');

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-ecg-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\r\n\t\"data\":{\r\n\t\t\"mobile_number\":\"".$id."\",\r\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\r\n\t}\r\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: text/plain"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
   // $hr = medcheckecgdata::wherehr($v['hr'])
           //   ->whereuser_id(1)
             // ->exists();
             $device_reading_time= medcheckecgdata::wheredevice_reading_time($v['device_reading_time'])
              ->whereuser_id(1)
              ->exists();

//str_replace('+', '', $v['country_code']); 
   // $bp = medcheckecgdata::whereBp(str_replace('+', '', $v['systolic']).$v['diastolic'])
       // ->whereid(1)
      // ->exists();

//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$device_reading_time){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medcheckecgdata();
    $patient->user_id = 1;
    $patient->hr =$v['hr'];
    $patient->qrs =$v['qrs']; 
    $patient->qt =$v['qt'];
    $patient->ecg_result =$v['ecg_result'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time ';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Heart Rate Successfully']);
}






public function SyncMedCheckWeightScale($id)
{
   $num =medcheckuserstable::where('mobile_no', ['mobile_no' => $id])->value('id');
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-weight-scale-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\n\t\"data\":{\n\t\t\"mobile_number\":\"".$id."\",\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\n\t}\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: application/json"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
    //$bmi_weight = medcheckweightscale::wherebmi_weight($v['bmi_weight'])
      //      ->whereid(1)
        //    ->exists();
//str_replace('+', '', $v['country_code']); 
    //$bp = medcheckuser::whereBp(str_replace('+', '', $v['systolic']).$v['diastolic'])
       // ->whereuser_id(4)
      //  ->exists();
             $device_reading_time= medcheckweightscale::wheredevice_reading_time($v['device_reading_time'])
              ->whereuser_id(1)
              ->exists();


//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$device_reading_time){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medcheckweightscale();
    $patient->bmi_weight=$v['bmi_weight'];
    $patient->bmi=$v['bmi']; 
    $patient->fat_per=$v['fat_per'];
    $patient->muscle_per=$v['muscle_per'];
    $patient->bmr=$v['bmr'];
    $patient->device_reading_time=$v['device_reading_time'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Weight Scale Successfully']);
}









public function SyncMedCheckSpo2Data($id)
{
  $num =medcheckuserstable::where('mobile_no', ['mobile_no' => $id])->value('id');
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-spo2-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\n\t\"data\":{\n\t\t\"mobile_number\":\"".$id."\",\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\n\t}\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: text/plain"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
    //$spo2_value = medcheckspo2::wherespo2_value($v['spo2_value'])
       //     ->whereuser_id(0)
         //   ->exists();
             $device_reading_time= medcheckspo2::wheredevice_reading_time($v['device_reading_time'])
              ->whereuser_id(1)
              ->exists();
//str_replace('+', '', $v['country_code']); 
    
//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$device_reading_time){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medcheckspo2();
    $patient->user_id =0;
    $patient->spo2_value =$v['spo2_value'];
    $patient->pr =$v['pr']; 
    $patient->pi =$v['pi'];
    $patient->spo2_result =$v['spo2_result'];
    $patient->device_reading_time =$v['device_reading_time'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Spo2 Data Successfully']);
}




public function SyncMedCheckTemparatureData($id)
{
   $num =medcheckuserstable::where('mobile_no', ['mobile_no' => $id])->value('id');
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-temperature-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\r\n\t\"data\":{\r\n\t\t\"mobile_number\":\"".$id."\",\r\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\r\n\t}\r\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: application/json"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
  //  $ptt_value = medchecktemparature::whereptt_value($v['ptt_value'])
    //        ->whereid(1)
      //      ->exists();
//str_replace('+', '', $v['country_code']); 
    $device_reading_time= medchecktemparature::wheredevice_reading_time($v['device_reading_time'])
              ->whereuser_id(1)
              ->exists();
//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$device_reading_time){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medchecktemparature();
    $patient->ptt_value=$v['ptt_value'];
    $patient->measure_mode=$v['measure_mode']; 
    $patient->device_reading_time=$v['device_reading_time'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Temparature Data Successfully']);
}




public function SyncMedCheckGlucoseData()
{
  
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://getmedcheck.com/medcheckfte/api/get-user-glucose-data",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS =>"{\n\t\"data\":{\n\t    \"email\": \"pratik.patel@letsnurture.com\",\n\t\t\"token\":\"4mzpc3yzzocgksoc4s4s00gskkscc8\"\n\t}\n}",
  CURLOPT_HTTPHEADER => array(
    "Content-Type: text/plain"
  ),
));

$response = curl_exec($curl);

curl_close($curl);
$response_data = json_decode($response, true);
//return response()->json($response_data['data'][0]);


            //foreach($response_data['data'] as $i => $v)
            foreach($response_data['data'] as $v)
           { 
                //echo $v['mobile_number'].'-';
                //return response()->json($v);
                //=============Inser User into C2P=========
                // Check Whether Patient Mobile or Email Exists or Not.
    $high_blood = medcheckglucosedata::wherehigh_blood($v['high_blood'])
            ->whereid(0)
            ->exists();
//str_replace('+', '', $v['country_code']); 
    //$bp = medcheckuser::whereBp(str_replace('+', '', $v['systolic']).$v['diastolic'])
       // ->whereuser_id(4)
      //  ->exists();

//if(!$email_exists){ 
//  return response()->json(['success' => false, 'message' => 'Email already Exists']);
//}
//!empty(str_replace(' ', '', $v['email']))


if(!$high_blood){
//return response()->json(['success' => false, 'message' => 'Mobile Number already Exists']);
//} 
try {

    DB::beginTransaction();
    // Create Patient 
    $patient = new medcheckglucosedata();
    $patient->high_blood=$v['high_blood'];
    $patient->indicator=$v['indicator']; 
    $patient->device_reading_time=$v['device_reading_time'];
    $patient->save();

    //$patient->id = Config::get('she.db.patientPrefix').$patient->id;
    //$patient->save();

    //Send Sms for User Mobile Verification
    //$verification_code = mt_rand(1000, 9999);
    //$msgtxt = 'Dear '.$patient->name.', Thank you for being with Cover2Protect. Kindly complete your registration by clicking the below link. http://127.0.0.1:8000/registermedcheck/'.$patient->mobile_no;
   // $msgData = array(
        //'recipient_no' => $patient->mobile_no,
        //'msgtxt' => $msgtxt
    //);
    //$sendsms = Helper::sendSMS($msgData);
    //$sendemail = Helper::sendMail($patient->mobile_no,$verification_code);
    DB::commit();

    //return response()->json(['success' => true, 'message' => 'User Registered Successfully', 'otp' => $verification_code, 'data' => $patient]);
}
catch(\Exception $e){
     
    DB::rollBack();
    echo $e; //'Error - rollback';//->$patient;
    //return response()->json(['success' => false, 'message' => 'Something Went Wrong']);
}
                //=========================================              
                //echo $v['mobile_number'].'-'.$i;
                //$regUser = $this->registermedcheckuser($v);
                //echo '-result '.$regUser;
                //return response()->json($regUser);
}// mobile exist check end
else
{
  echo 'reading already exists on same time';
}

} //foreach end
return response()->json(['success' => true, 'message' => 'User Sync Glucose Data Successfully']);
}



public function getuserbpdata(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient = medcheckuser::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}

public function getuserweightscaledata(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient = medcheckweightscale::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}
public function getuserglucosedata(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient = medcheckglucosedata::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}
public function getuserspo2(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient = medcheckspo2::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}

public function getuserecgdata(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient = medcheckecgdata::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}


public function getusertemparaturedata(Request $request)
{
  $email_exists = User::whereEmail($request->email)
              ->whereUserRole(4)
              ->exists();

    $mobile_exists = User::whereMobileNo('91'.$request->mobile_no)
              ->whereUserRole(4)
              ->exists();


if(!$mobile_exists)
{
  $patient =  medchecktemparature::all();
  return  response()->json($patient);

}
else
{
  echo 'Something went wrong, please try again..';
}


}

public function getusersdata(Request $request)

{
 $num =medcheckuserstable::where('id','218')->value('mobile_no');
 //$email = DB::table('users')->where('name', 'John')->value('email');
return $num;
}

}

